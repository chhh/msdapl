/*
 * YatesDataParser.java
 * Created on Oct 12, 2004
 * Created by Michael Riffle <mriffle@u.washington.edu>
 */

package org.yeastrc.www.yates;

import org.yeastrc.yates.*;
import java.io.*;
import java.util.*;
import java.util.regex.*;
import org.yeastrc.nr_seq.*;

/**
 * Description of class goes here.
 * 
 * @author Michael Riffle <mriffle@u.washington.edu>
 * @version Oct 12, 2004
 */

public class YatesDataParser {

	/**
	 * Parse the given directory for data relating to one YatesRun
	 * @param directory The directory to parse
	 * @throws Exception If there is a problem parsing the data
	 */
	public void parseData(String directory) throws IOException, Exception {
		String line = null;
		IYatesDTASelectFilterParser fparser = null;
		
		// Read in and Parse the DTASelect-filter.txt file.
		File dtafilter = new File (directory, "DTASelect-filter.txt");
		if (!dtafilter.exists())
			throw new Exception ("Could not find DTASelect-filter.txt for parsing.");

		// Get our file reader
		BufferedReader br = new BufferedReader( new FileReader ( dtafilter ) );
		
		// Read the first line for DTASelect version number.
		line = br.readLine();
		if (line == null)
			throw new Exception ("Could not read line 1 of DTASelect-filter.txt for parsing.");
		
		// line 1 format: DTASelect v1.9
		Pattern pattern = Pattern.compile("^DTASelect v(.+)$");
		Matcher m = pattern.matcher(line);
		if (!m.matches())
			throw new Exception ("Unrecognized first line in DTASelect-filter.txt for parsing.");
		String version = m.group(1);
		
		if (version.equals("1.9"))
			fparser = new YatesDTASelectFilter1_9Parser();
		else if (version.equals("1.8"))
			fparser = new YatesDTASelectFilter1_8Parser();
		else if (version.startsWith("2.0"))
			fparser = new YatesDTASelectFilter2_0Parser();
		else 
			throw new Exception ("DTASelect version " + version + " is not understood.  Please contact the YRC informatics group.");
		
		
		// Parse line 2 (Yates Directory line)
		line = br.readLine();
		if (line == null)
			throw new Exception ("Could not read line 2 of DTASelect-filter.txt for parsing.");
		directoryName = line;
		
		// Parse line 3 (Yates FASTA data text file line)
		line = br.readLine();
		if (line == null)
			throw new Exception ("Could not read line 3 of DTASelect-filter.txt for parsing.");

		String[] dirs = line.split("/");
		databaseName = dirs[dirs.length - 1];
		databaseName = databaseName.replaceAll("\\$", "");
		NRDatabaseUtils dbs = NRDatabaseUtils.getInstance();
		int databaseID = dbs.validDatabaseName(databaseName);
		if (databaseID == -1)
			throw new Exception ("Could not find database information for " + databaseName + " in the YRC database.  Please contact the YRC Informatics group to arrange parsing of this fasta file.");

		
		// Parse the file for results
		this.results = fparser.parseFile(br, databaseID);
	}
	
	/**
	 * Construct!
	 */
	public YatesDataParser() {
		this.directoryName = null;
		this.databaseName = null;
		this.results = new ArrayList();
	}
	
	// Instance variables and their access methods
	private String directoryName;
	private String databaseName;
	private List results;
	
	/**
	 * @return Returns the database name (fasta file) used to run SEQUEST
	 */
	public String getDatabaseName() {
		return databaseName;
	}

	/**
	 * @return Returns the directory name from the scripps server
	 */
	public String getDirectoryName() {
		return directoryName;
	}

	/**
	 * @return Returns a List of Results generated by parsing the DTASelect-filter.txt file
	 */
	public List getResults() {
		return results;
	}

}
