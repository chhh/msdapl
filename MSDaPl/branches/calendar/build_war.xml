<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." name="MSDaPl package maker" default="package_war">

	<property name="target" value="1.6"/>
	<property name="source" value="1.6"/>

	<property name="war_file_name" value="msdapl.war" />
	
	<property name="war_file" value="${basedir}${file.separator}${war_file_name}"/>


	<property name="src_dir" value="${basedir}${file.separator}src" />
	<property name="webroot_dir" value="${basedir}${file.separator}WebRoot" />
	<property name="webinf_dir" value="${basedir}${file.separator}WebRoot${file.separator}WEB-INF" />
	<property name="metainf_dir" value="${basedir}${file.separator}WebRoot${file.separator}META-INF" />
	<property name="lib_dir" value="${webinf_dir}${file.separator}lib" />
	<property name="classes_dir" value="${webinf_dir}${file.separator}classes" />

	<property name="web_xml" value="${webinf_dir}${file.separator}web.xml" />

	
	
	<property name="aa_SVN_Info_Resources__dir_name" value="aa_SVN_Info_Resources" />
	
	<property name="aa_Ant_Config__dir_name" value="aa_Ant_Config" />

	
	<!--  list the two paths to the SVN checkout root that will be tested. 
			The one that is found to hold  'aa_SVN_Info_Resources' will be used\
	-->
	
	<property name="path_to_SVN_checkout_root_1" 
		value="${basedir}${file.separator}..${file.separator}..${file.separator}" />

	<property name="path_to_SVN_checkout_root_2" 
		value="${basedir}${file.separator}..${file.separator}..${file.separator}..${file.separator}" />

	
	<!--  if root SVN found, use this -->
	<condition property="path_to_SVN_checkout_root" value="${path_to_SVN_checkout_root_1}">
       	<available file="${path_to_SVN_checkout_root_1}${file.separator}${aa_SVN_Info_Resources__dir_name}" />
	</condition>
	
	<!--  if root SVN found, use this -->
	<condition property="path_to_SVN_checkout_root" value="${path_to_SVN_checkout_root_2}">
       	<available file="${path_to_SVN_checkout_root_2}${file.separator}${aa_SVN_Info_Resources__dir_name}" />
	</condition>
	
	
	<fail message="ERROR: Test failed for checking path to SVN checkout Root: 'aa_SVN_Info_Resources' directory not found at SVN checkout root, check the path. paths attempted are: ${path_to_SVN_checkout_root_1} and ${path_to_SVN_checkout_root_2}">
	    <condition>
	        <not>
	        	<isset property="path_to_SVN_checkout_root"/>
	        </not>
	    </condition>
	</fail>
	
	
	
	
	

	<property name="path_to__aa_SVN_Info_Resources" value="${path_to_SVN_checkout_root}${file.separator}${aa_SVN_Info_Resources__dir_name}" />
	
	<property name="path_to__aa_Ant_Config" value="${path_to_SVN_checkout_root}${file.separator}${aa_Ant_Config__dir_name}" />

	
	<fail message="ERROR: 'aa_Ant_Config' directory not found at SVN checkout root, check the path. path: ${path_to__aa_Ant_Config}">
	    <condition>
	        <not>
	        	<available file="${path_to__aa_Ant_Config}" />
	        </not>
	    </condition>
	</fail>
	
	
	<!-- ================================================================================== -->
	<!-- SVN repository wide overall SVN properties in svn_resources.properties -->
	<!-- ================================================================================== -->
	
	<property name="svn_resources.properties__file_with_path" 
		value="${path_to__aa_SVN_Info_Resources}${file.separator}svn_resources.properties"/>
	
	<fail message="ERROR: 'svn_resources.properties' file not found, check the path. filename with path: ${svn_resources.properties__file_with_path}">
	    <condition>
	        <not>
	        	<available file="${svn_resources.properties__file_with_path}" />
	        </not>
	    </condition>
	</fail>
	
	<!-- This does not fail if the file is not found -->
	<property file="${svn_resources.properties__file_with_path}" />

	
	<!-- ================================================================================== -->
	<!-- Setup classpath for svnant -->
	<!-- ================================================================================== -->
	<path id= "svnant.classpath" >
		
		<fileset dir= "${path_to__aa_SVN_Info_Resources}${file.separator}${svn.jars.dir}" >
			<include name= "*.jar" />
		</fileset>
	</path>
	
			
			
	<!-- ================================================================================== -->
	<!--  SVN repository wide overall Ant properties in overall_build_config.properties -->
	<!-- ================================================================================== -->
	
	
	<property name="overall_build_config.properties__file_with_path" 
		value="${path_to__aa_Ant_Config}${file.separator}overall_build_config.properties"/>
		
	<fail message="ERROR: 'overall_build_config.properties' file not found, check the path. filename with path: ${overall_build_config.properties__file_with_path}">
	    <condition>
	        <not>
	        	<available file="${overall_build_config.properties__file_with_path}" />
	        </not>
	    </condition>
	</fail>
	
	<!-- This does not fail if the file is not found -->
	<property file="${overall_build_config.properties__file_with_path}" />

	
	
	<!-- ================================================================================== -->
	<!-- Test for svnant -->
	<!-- ================================================================================== -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />
		
	
	
	<!-- ================================================================================== -->
	<!-- jars required only for compiling. Should not be packaged with the .war -->
	<!-- ================================================================================== -->
	<property name="libs_for_compile" value="${basedir}${file.separator}lib" />



	<!-- ================================================================================== -->
	<!-- Package the war -->
	<!-- ================================================================================== -->
	<target name="package_war" depends="compile"
		description="Packages the project as a deployable war file">

		<svn username="${svn.username}" password="${svn.password}">
			
			<wcVersion path="${basedir}" prefix="msdapl_war."/>

<!--			
			<wcVersion path="${project.yrc_utils}" prefix="yrc_utils."/>
-->			
		</svn>
		
		<condition property="wc_modified" else="NO" value="YES">
  			<isset property="msdapl_war.modified"/>
  		</condition>
		<condition property="wc_mixed" else="NO" value="YES">
  			<isset property="msdapl_war.mixed"/>
  		</condition>
  		<echo message="${basedir} is at revision ${msdapl_war.revision.max-with-flags}" />
  		<echo message="Working copy is modifed ${wc_modified}" />
  		<echo message="Working copy is mixed ${wc_mixed}" />
		
		<war destfile="${war_file}" webxml="${web_xml}">
  			<manifest>
  				<attribute name="Built-By" value="${user.name}"/>
  				<attribute name="Svn-Repository-URL" value="${msdapl_war.repository.url}"/>
  				<attribute name="Svn-Revision" value="${msdapl_war.revision.max-with-flags}"/>
  				<attribute name="Svn-Revision-Range" value="${msdapl_war.revision.range}"/>
  				<attribute name="Svn-WorkingCopy-Modified" value="${wc_modified}"/>
  				<attribute name="Svn-WorkingCopy-Mixed" value="${wc_mixed}"/>
  			</manifest>

<!--
			<lib dir="${lib_dir}"></lib>
			<classes dir="${classes_dir}" />
			<webinf dir="${webinf_dir}" />
-->
			<metainf dir="${metainf_dir}" />
			<fileset dir="${webroot_dir}" />
		</war>

	</target>

	<!-- ================================================================================== -->
	<!-- Remove classes directory for clean build -->
	<!-- ================================================================================== -->
    <target name="clean" description="Prepare for clean build">
      <delete dir="${classes_dir}"/>
      <mkdir  dir="${classes_dir}"/>
    </target>



	<!-- ================================================================================== -->
	<!-- Normal build of application -->
	<!-- ================================================================================== -->
    <target name="compile" depends="clean,prepare,resources">
    	<echo message="${toString:compile.classpath}"/>
        <javac debug="on" srcdir="${src_dir}" destdir="${classes_dir}" source="${source}" target="${target}" encoding="${msdapl.java.source.character.set}" >
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

	<!-- classpath  -->
    <path id="compile.classpath">
    	<fileset dir="${lib_dir}">
        	<include name="**/*.jar"/>
      	</fileset>
    	<fileset dir="${libs_for_compile}">
    		<include name="**/*.jar"/>
    	</fileset>
        <pathelement path ="${classes_dir}"/>
    </path>

	<!-- Check timestamp on files -->
    <target name="prepare">
        <tstamp/>
    </target>

	<!-- ================================================================================== -->
	<!-- Copy any resource or configuration files -->
	<!-- ================================================================================== -->
    <target name="resources">
        <copy todir="${classes_dir}" includeEmptyDirs="no">
            <fileset dir="${src_dir}">
            <patternset>
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </patternset>
            </fileset>
        </copy>
    </target>


</project>