/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.uwpr.www.costcenter;

import java.sql.Date;
import java.sql.Time;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.uwpr.instrumentlog.DateUtils;


public class TimeBlockForm extends ActionForm {

	private String numHoursString;
	
	private String startTimeHour;
	private String startTimeMin;
	private String startTimeAmPm;
	
	//private String effectiveDateString;
	
	private String name;


	/** 
	 * Method validate
	 * @param mapping
	 * @param request
	 * @return ActionErrors
	 */
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		
		ActionErrors errors = new ActionErrors();
		
		int numHrs = getNumHours();
		if(numHrs <= 0) {
			errors.add("costcenter", new ActionMessage("error.costcenter.invaliddata", "Invalid value for number of hours"));
		}
		if(numHrs > 24) {
			errors.add("costcenter", new ActionMessage("error.costcenter.invaliddata", "Number of hours cannot exceed 24"));
		}
		
		return errors;
	}

	
	public String getNumHoursString() {
		return numHoursString;
	}

	public void setNumHoursString(String numHours) {
		this.numHoursString = numHours;
	}
	
	public int getNumHours() {
		try {
			return Integer.parseInt(numHoursString);
		}
		catch(NumberFormatException e) {
			return 0;
		}
	}

	public String getStartTimeHour() {
		return startTimeHour;
	}

	public void setStartTimeHour(String startTimeHour) {
		this.startTimeHour = startTimeHour;
	}

	public String getStartTimeMin() {
		return startTimeMin;
	}

	public void setStartTimeMin(String startTimeMin) {
		this.startTimeMin = startTimeMin;
	}

	public String getStartTimeAmPm() {
		return startTimeAmPm;
	}

	public void setStartTimeAmPm(String startTimeAmPm) {
		this.startTimeAmPm = startTimeAmPm;
	}

	
	public void setStartTime(Time startTime) {
		
		Date date = new Date(startTime.getTime());
		this.startTimeHour = String.valueOf(DateUtils.getHour(date));
		this.startTimeMin = String.valueOf(DateUtils.getMinutes(date));
		this.startTimeAmPm = DateUtils.getAmPm(date) == Calendar.AM ? "AM" : "PM";
		
	}
	
	public Time getStartTime() {
		
		if(startTimeHour.equals("0")) // start time was not specified in the form
			return null;
		
		int startHour = Integer.parseInt(startTimeHour);
		int startMin = Integer.parseInt(startTimeMin);
		
		if(this.startTimeAmPm == null) {
			return null;
		}
		
		Calendar calendar = Calendar.getInstance();
		if(startHour == 12)	startHour = 0;
		calendar.set(Calendar.HOUR, startHour); // Calendar.HOUR is used for the 12 hour clock (0 to 11)
											   // Noon and midnight are represented by 0, not by 12. E.g., at 10:04:15.250 PM the HOUR is 10.
		calendar.set(Calendar.MINUTE, startMin);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		if(this.startTimeAmPm.equals("AM"))
			calendar.set(Calendar.AM_PM, Calendar.AM);
		else
			calendar.set(Calendar.AM_PM, Calendar.PM);
		
		return new Time(calendar.getTimeInMillis());
		
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
}