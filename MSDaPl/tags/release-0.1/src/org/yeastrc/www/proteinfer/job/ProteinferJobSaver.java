package org.yeastrc.www.proteinfer.job;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.yeastrc.db.DBConnectionManager;
import org.yeastrc.ms.dao.DAOFactory;
import org.yeastrc.ms.dao.ProteinferDAOFactory;
import org.yeastrc.ms.dao.analysis.MsSearchAnalysisDAO;
import org.yeastrc.ms.dao.protinfer.ibatis.ProteinferInputDAO;
import org.yeastrc.ms.dao.protinfer.ibatis.ProteinferRunDAO;
import org.yeastrc.ms.dao.protinfer.idpicker.ibatis.IdPickerParamDAO;
import org.yeastrc.ms.dao.search.MsSearchDAO;
import org.yeastrc.ms.domain.analysis.MsSearchAnalysis;
import org.yeastrc.ms.domain.protinfer.ProteinInferenceProgram;
import org.yeastrc.ms.domain.protinfer.ProteinferInput;
import org.yeastrc.ms.domain.protinfer.ProteinferRun;
import org.yeastrc.ms.domain.protinfer.ProteinferInput.InputType;
import org.yeastrc.ms.domain.protinfer.idpicker.IdPickerInput;
import org.yeastrc.ms.domain.protinfer.idpicker.IdPickerParam;
import org.yeastrc.ms.domain.protinfer.idpicker.IdPickerRun;
import org.yeastrc.ms.domain.search.MsSearch;
import org.yeastrc.www.proteinfer.ProteinInferInputSummary;
import org.yeastrc.www.proteinfer.ProteinInferInputSummary.ProteinInferIputFile;
import org.yeastrc.www.proteinfer.job.ProgramParameters.Param;

public class ProteinferJobSaver {

    private static final Logger log = Logger.getLogger(ProteinferJobSaver.class);
    
    private static final ProteinferDAOFactory fact = ProteinferDAOFactory.instance();
    private static final ProteinferRunDAO pinferDao = fact.getProteinferRunDao();
    private static final ProteinferInputDAO pinferInputDao = fact.getProteinferInputDao();
    private static final IdPickerParamDAO pinferParamDao = fact.getProteinferParamDao();
    
    
    private static final ProteinferJobSaver saver = new ProteinferJobSaver();
    
    private ProteinferJobSaver() {}
    
    public static ProteinferJobSaver instance() {
        return saver;
    }
    
    public void saveJobToDatabase(int submitterId, 
            ProteinInferInputSummary inputSummary, ProgramParameters params,
            InputType inputType, String comments) throws Exception {
        
        submitProtInferJob(submitterId, params, inputType,
				inputSummary.getInputGroupId(), inputSummary.getInputFiles(), comments);
    }

	private void submitProtInferJob(int submitterId, ProgramParameters params,
			InputType inputType, int inputGroupId, List<ProteinInferIputFile> inputFiles, String comments) throws Exception,
			SQLException {
		// create an entry in the main protein inference table and get an id 
        // for this protein inference run
        ProteinInferenceProgram program = ProteinInferenceProgram.getProgramForName(params.getProgramName());
        if(program == null) {
            log.error("Could not find protein inference program with name: "+params.getProgramName());
            throw new Exception("Could not find protein inference program with name: "+params.getProgramName());
        }
        ProteinferRun pirun = new ProteinferRun();
        pirun.setProgram(program);
        if(comments != null)
            pirun.setComments(comments);
        
        if(inputType == InputType.SEARCH) {
            MsSearchDAO searchDao = DAOFactory.instance().getMsSearchDAO();
            MsSearch search = searchDao.loadSearch(inputGroupId);
            // We may have input from multiple search search but all of then should
            // be generated by the same program. 
            // TODO check input to make sure the program is the same for all.
            pirun.setInputGenerator(search.getSearchProgram());
        }
        else if(inputType == InputType.ANALYSIS) {
            MsSearchAnalysisDAO analysisDao = DAOFactory.instance().getMsSearchAnalysisDAO();
            MsSearchAnalysis analysis = analysisDao.load(inputGroupId);
            // We may have input from multiple search analyses but all of then should
            // be generated by the same program. 
            // TODO check input to make sure the program is the same for all.
            pirun.setInputGenerator(analysis.getAnalysisProgram());
        }
        
        int pinferId = pinferDao.save(pirun);
        
        if(pinferId <= 0) {
            log.error("Error saving a new entry for Protein Inference");
            throw new Exception("Error saving a new entry for Protein Inference");
        }
        
        // save the input file information
        for(ProteinInferIputFile runSearch: inputFiles) {
            if(!runSearch.getIsSelected()) continue; // if this file was not selected don't save it
            ProteinferInput input = new ProteinferInput();
            input.setProteinferId(pinferId);
            input.setInputId(runSearch.getInputId());
//            input.setInputType(inputType);
            pinferInputDao.saveProteinferInput(input);
        }
        
        // save the parameters
        if(ProteinInferenceProgram.isIdPicker(program)) {
            saveIdPickerParams(pinferId, params);
        }
        
        // create and entry in tblJobs
        int jobId = createEntryInTblJobs(submitterId);
        
        // finally save info in tblProteinferJobs;
        createEntryInTblProteinferJobs(jobId, pinferId);
	}
	
	public int submitIdPickerJob(int submitterId, IdPickerRun pirun) throws Exception,
			SQLException {
        
        int pinferId = pinferDao.save(pirun);
        
        if(pinferId <= 0) {
            log.error("Error saving a new entry for Protein Inference");
            throw new Exception("Error saving a new entry for Protein Inference");
        }
        
        List<IdPickerInput> inputFiles = pirun.getInputList();
        // save the input file information
        for(IdPickerInput input: inputFiles) {
        	input.setProteinferId(pinferId);
            pinferInputDao.saveProteinferInput(input);
        }
        
        // save the parameters
        if(ProteinInferenceProgram.isIdPicker(pirun.getProgram())) {
        	for(IdPickerParam param: pirun.getParams()) {
        		param.setProteinferId(pinferId);
                pinferParamDao.saveIdPickerParam(param);
            }
        }
        
        // create and entry in tblJobs
        int jobId = createEntryInTblJobs(submitterId);
        
        // finally save info in tblProteinferJobs;
        createEntryInTblProteinferJobs(jobId, pinferId);
        
        return jobId;
	}
    
    /**
     * Saves one job for each selected file in inputSummary
     * @param submitterId
     * @param inputSummary
     * @param params
     * @param inputType
     * @param comments
     * @throws Exception
     */
    public void saveMultiJobToDatabase(int submitterId, 
            ProteinInferInputSummary inputSummary, ProgramParameters params,
            InputType inputType, String comments) throws Exception {
        
        
        // Save one job for each selected file
        for(ProteinInferIputFile runSearch: inputSummary.getInputFiles()) {
            if(!runSearch.getIsSelected()) continue; // if this file was not selected don't save it
            
            String comment = runSearch.getRunName()+"  "+comments;
            List<ProteinInferIputFile> inputfiles = new ArrayList<ProteinInferIputFile>(1);
            inputfiles.add(runSearch);
            submitProtInferJob(submitterId, params, inputType, inputSummary.getInputGroupId(), 
            		inputfiles, comment);
            
        }
    }

    private void saveIdPickerParams(int pinferId, ProgramParameters params) {
        for(Param param: params.getParamList()) {
            if(param.getValue() == null || param.getValue().trim().length() == 0)
                continue;
            IdPickerParam idpParam = new IdPickerParam();
            idpParam.setProteinferId(pinferId);
            idpParam.setName(param.getName());
            idpParam.setValue(param.getValue());
            pinferParamDao.saveIdPickerParam(idpParam);
        }
    }

    private int createEntryInTblJobs(int submitterId) throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            
            conn = DBConnectionManager.getConnection(DBConnectionManager.JOB_QUEUE);
            String sql = "SELECT * FROM tblJobs WHERE id = 0";
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            rs = stmt.executeQuery( sql );
            rs.moveToInsertRow();
            
            rs.updateInt( "submitter", submitterId);
            rs.updateInt( "type", 1); // This is a Protein Inference Job
            rs.updateDate( "submitDate", new java.sql.Date( (new java.util.Date()).getTime() ) );
            rs.updateInt( "status", 0 );
            rs.updateInt( "attempts", 0 );
            
            rs.insertRow();
            rs.last();
            
            int id = rs.getInt( "id" );
            
            rs.close(); rs = null;
            stmt.close(); stmt = null;
            conn.close(); conn = null;
            
            return id;
            
        } finally {
            
            if (rs != null) {
                try { rs.close(); rs = null; } catch (Exception e) { ; }
            }

            if (stmt != null) {
                try { stmt.close(); stmt = null; } catch (Exception e) { ; }
            }
            
            if (conn != null) {
                try { conn.close(); conn = null; } catch (Exception e) { ; }
            }           
        }
    }

    private void createEntryInTblProteinferJobs(int jobId, int pinferId) throws Exception {
        
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        boolean newRow = false;
        
        try {
            
            conn = DBConnectionManager.getConnection(DBConnectionManager.JOB_QUEUE);
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            String sql = "SELECT * FROM tblProteinInferJobs WHERE jobID = " + jobId;
            rs = stmt.executeQuery( sql );
            
            if (!rs.next()) {
                rs.moveToInsertRow();
                newRow = true;
            }
            
            rs.updateInt( "jobID", jobId);
            rs.updateInt( "piRunID", pinferId);
            
            
            if (newRow)
                rs.insertRow();
            else
                rs.updateRow();
            
            rs.close(); rs = null;
            stmt.close(); stmt = null;
            conn.close(); conn = null;
            
        } finally {
            
            if (rs != null) {
                try { rs.close(); rs = null; } catch (Exception e) { ; }
            }

            if (stmt != null) {
                try { stmt.close(); stmt = null; } catch (Exception e) { ; }
            }
            
            if (conn != null) {
                try { conn.close(); conn = null; } catch (Exception e) { ; }
            }           
        }
    }
}
